@using Blazor.Extensions;
@using Blazor.Extensions.Storage;
@using AspNetMonsters.Blazor.Geolocation;
@using Microsoft.JSInterop;
@using Microsoft.AspNetCore.Blazor.Services;
@using WiMD.Client.Models;

@inject LocationService LocationService
@inject SessionStorage sessionStorage
@inject IUriHelper uriHelper
@inject HttpClient Http

<ul class="list-group col-md-4">
    <h5>Friends</h5>
    @foreach (var connectedUser in @ConnectedUsers)
    {
    <li class="list-group-item">
        <img src="avatars/woman-avatar.png" alt="Avatar" class="avatar">
        <span>@connectedUser.FirstName @connectedUser.LastName</span>
        <button type="button" class="btn btn-primary btn-sm" onclick=@(() => HandleAddButtonClick(connectedUser))>Add</button>
        <button type="button" class="btn btn-warning btn-sm" onclick=@(() => HandleStopButtonClick(connectedUser))>Stop</button>
    </li>
    }
</ul>

@functions {

    [Parameter]
    IEnumerable<UserGeolocation> ConnectedUsers { get; set; }

    [Parameter]
    Func<UserGeolocation, Task> AddListenForUserAction { get; set; }

    [Parameter]
    Func<UserGeolocation, Task> StopListenForUserAction { get; set; }

    async Task HandleAddButtonClick(UserGeolocation e)
    {
        Console.WriteLine($"HandleAddButtonClick");
        await AddListenForUserAction.Invoke(e);
    }

    async Task HandleStopButtonClick(UserGeolocation e)
    {
        Console.WriteLine($"HandleStopButtonClick");
        await StopListenForUserAction.Invoke(e);
    }
}