@using Blazor.Extensions;
@using Blazor.Extensions.Storage;
@using AspNetMonsters.Blazor.Geolocation;
@using Microsoft.JSInterop;
@using Microsoft.AspNetCore.Blazor.Services;

@inject LocalStorage localStorage
@inject LocationService LocationService
@inject IUriHelper uriHelper

@page "/location"

<div class="container">
    <input type="button" id="sendMessage" value="Send" class="btn btn-primary" onclick="@SendMessage" />
</div>
<div class="container">
    <div id="mapid">

    </div>
</div>

@functions {
    HubConnection connection;
    AspNetMonsters.Blazor.Geolocation.Location location;
    IList<UserLocation> usersLocation = new List<UserLocation>();
    IList<AspNetMonsters.Blazor.Geolocation.Location> locations = new List<AspNetMonsters.Blazor.Geolocation.Location>();

    protected override async Task OnInitAsync()
    {
        var token = await localStorage.GetItem<string>("token");
        Console.WriteLine($"Location {token}");
        if (token == null)
        {
            uriHelper.NavigateTo("/login");
        }
        connection = new HubConnectionBuilder().WithUrl("http://localhost:64827/locationhub", options =>
        {
            options.AccessTokenProvider = () => Task.FromResult(token);
        })
        .Build();

        connection.On<UserLocation>("broadcastMessage", this.OnBroadcastMessage);
        await connection.StartAsync();

        location = await LocationService.GetLocationAsync();
        var userName = await localStorage.GetItem<string>("user_name");

        await JSRuntime.Current.InvokeAsync<bool>("SetMap", location.Latitude, location.Longitude);
    }

    Task OnBroadcastMessage(UserLocation userLocation)
    {
        if (usersLocation.Any(x => x.Email == userLocation.Email))
        {
            var locationToUpdate = usersLocation.First(x => x.Email == userLocation.Email);
            locationToUpdate.Location = userLocation.Location;
        }
        else
        {
            usersLocation.Add(userLocation);
        }

        LogAllUsersLocation();

        foreach (var l in usersLocation)
        {
            JSRuntime.Current.InvokeAsync<bool>("AddLocation", l.Location.Latitude, l.Location.Longitude, l.Email);
        }

        return Task.CompletedTask;
    }

    private void LogAllUsersLocation()
    {
        foreach (var user in usersLocation)
        {
            Console.WriteLine($"Email {user.Email}, Lat {user.Location.Latitude}, Long {user.Location.Longitude}");
        }
    }

    async Task SendMessage()
    {
        location = await LocationService.GetLocationAsync();
        UserLocation currentUser = new UserLocation
        {
            Email = await localStorage.GetItem<string>("user_name"),
            Location = new AspNetMonsters.Blazor.Geolocation.Location { Latitude = location.Latitude, Longitude = location.Longitude }
        };

        await connection.InvokeAsync("Send", currentUser);
    }

    public class UserLocation
    {
        public string Email { get; set; }
        public AspNetMonsters.Blazor.Geolocation.Location Location { get; set; }
    }
}