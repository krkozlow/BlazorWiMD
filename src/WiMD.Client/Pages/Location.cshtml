@using Blazor.Extensions;
@using Blazor.Extensions.Storage;
@using AspNetMonsters.Blazor.Geolocation;
@using Microsoft.JSInterop;
@using Microsoft.AspNetCore.Blazor.Services;

@inject LocalStorage localStorage
@inject LocationService LocationService
@inject IUriHelper uriHelper

@page "/location"

<div class="container">
    <input type="button" id="sendMessage" value="Send" class="btn btn-primary" onclick="@SendMessage" />
</div>
<div class="container">
    <div id="mapid">

    </div>
</div>

@functions {
    HubConnection connection;
    IList<string> messages = new List<string>();
    AspNetMonsters.Blazor.Geolocation.Location location;
    IList<AspNetMonsters.Blazor.Geolocation.Location> locations = new List<AspNetMonsters.Blazor.Geolocation.Location>();

    protected override async Task OnInitAsync()
    {
        var token = await localStorage.GetItem<string>("token");
        Console.WriteLine($"Location {token}");
        if (token == null)
        {
            uriHelper.NavigateTo("/login");
        }
        connection = new HubConnectionBuilder().WithUrl("http://localhost:64827/locationhub", options =>
        {
            options.AccessTokenProvider = () => Task.FromResult(token);
        })
        .Build();

        connection.On<AspNetMonsters.Blazor.Geolocation.Location>("broadcastMessage", this.OnBroadcastMessage);
        await connection.StartAsync();

        location = await LocationService.GetLocationAsync();
        await JSRuntime.Current.InvokeAsync<bool>("SetMap", location.Latitude, location.Longitude);
        await JSRuntime.Current.InvokeAsync<bool>("AddLocation", location.Latitude, location.Longitude);
    }

    Task OnBroadcastMessage(AspNetMonsters.Blazor.Geolocation.Location sendLocation)
    {
        Console.WriteLine("OnBroadcastMessage");
        locations.Add(sendLocation);

        Console.WriteLine($"Amount of locations {locations.Count}");

        foreach (var l in locations)
        {
            JSRuntime.Current.InvokeAsync<bool>("AddLocation", l.Latitude, l.Longitude);
        }

        return Task.CompletedTask;
    }

    async Task SendMessage()
    {
        location = await LocationService.GetLocationAsync();
        await connection.InvokeAsync("Send", new AspNetMonsters.Blazor.Geolocation.Location { Latitude = location.Latitude, Longitude = location.Longitude });
    }
}