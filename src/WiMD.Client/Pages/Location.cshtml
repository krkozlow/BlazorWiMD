@using Blazor.Extensions;
@using Blazor.Extensions.Storage;
@using AspNetMonsters.Blazor.Geolocation;
@using Microsoft.JSInterop;
@using Microsoft.AspNetCore.Blazor.Services;
@using WiMD.Client.Models;
@using WiMD.Client.api;
@using WiMD.Client.Services;

@inject LocationService LocationService
@inject SessionStorage sessionStorage
@inject IUriHelper uriHelper
@inject HttpClient Http

@page "/location"

<div class="modal-body row">
    <Friends ConnectedUsers="@connectedUsers" AddListenForUserAction="@AddListenForUserAction" />
    <GeolocationMap />
</div>

@functions {
    IEnumerable<UserGeolocation> connectedUsers = new List<UserGeolocation>();
    GeolocationHub hub;

    async Task AddListenForUserAction(UserGeolocation userGeolocation)
    {
        await hub.ListenForUser(userGeolocation);
    }

    protected override async Task OnInitAsync()
    {
        await RedirectionHelper.ForUnathorizeUserRedirectToLoginPage(sessionStorage, uriHelper);
        var hubConnection = await HubConnectionProvider.CreateHubConnection(BaseApi.GeolocationHubUrl, sessionStorage);
        hub = new GeolocationHub(hubConnection, LocationService, Http);
        hub.RegisterGeolocationHandler(UpdateViewAfterHandlerUserGeolocation);
        await hub.Start();

        connectedUsers = await hub.GetConnectedUsers();
        base.StateHasChanged();

        await base.OnInitAsync();
    }

    protected override async Task OnAfterRenderAsync()
    {
        Console.WriteLine("OnAfterRenderAsync");
        await Task.Delay(5000);
        await hub.SendCurrentUserGeolocation();
        await base.OnAfterRenderAsync();
    }

    void UpdateViewAfterHandlerUserGeolocation(IList<UserGeolocation> usersLocation)
    {
        JSRuntime.Current.InvokeAsync<bool>("CleanMarkups");

        foreach (var userLocation in usersLocation)
        {
            JSRuntime.Current.InvokeAsync<bool>("AddLocation", userLocation.Location.Latitude, userLocation.Location.Longitude, userLocation.Email);
        }
    }
}