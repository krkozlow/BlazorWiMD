@using Blazor.Extensions;
@using Blazor.Extensions.Storage;
@using AspNetMonsters.Blazor.Geolocation;
@using Microsoft.JSInterop;

@inject LocalStorage localStorage
@inject LocationService LocationService

@page "/location"

<div class="container">
    <input type="button" id="sendMessage" value="Send" class="btn btn-primary" onclick="@SendMessage" />
    @*<ul id="discussion">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>*@
</div>
<div class="container">
    <div id="mapid">

    </div>
</div>

@functions {
        Dictionary<string, AspNetMonsters.Blazor.Geolocation.Location> locations = new Dictionary<string, AspNetMonsters.Blazor.Geolocation.Location>();
        HubConnection connection;
        IList<string> messages = new List<string>();
        AspNetMonsters.Blazor.Geolocation.Location location;
        string token;

    protected override async Task OnAfterRenderAsync()
    {
        location = await LocationService.GetLocationAsync();
        await JSRuntime.Current.InvokeAsync<bool>("SetMap", location.Latitude, location.Longitude);
        //await JSRuntime.Current.InvokeAsync<bool>("AddLocation", location.Latitude, location.Longitude);
    }

    protected override async Task OnInitAsync()
    {
        token = await localStorage.GetItem<string>("token");
        connection = new HubConnectionBuilder().WithUrl("http://localhost:64827/locationhub", options =>
        {
            options.AccessTokenProvider = () => Task.FromResult(token);
        })
        .Build();
        connection.On<string, AspNetMonsters.Blazor.Geolocation.Location>("broadcastMessage", this.OnBroadcastMessage);
        await connection.StartAsync();
    }

    Task OnBroadcastMessage(string tok, AspNetMonsters.Blazor.Geolocation.Location loc)
    {
        if (locations.ContainsKey(tok))
        {
            locations[tok] = loc;
        }
        else
        {
            locations.Add(token, loc);
        }

        JSRuntime.Current.InvokeAsync<bool>("SetMap", location.Latitude, location.Longitude);
        foreach (var l in locations)
        {
            Console.WriteLine($"Location: {l.Value.Latitude} user: {l.Key}");
            JSRuntime.Current.InvokeAsync<bool>("AddLocation", l.Value.Latitude, l.Value.Longitude);
        }

        return Task.CompletedTask;
    }

    async Task SendMessage()
    {
        location = await LocationService.GetLocationAsync();
        await connection.InvokeAsync("Send", token, new AspNetMonsters.Blazor.Geolocation.Location { Latitude = location.Latitude, Longitude = location.Longitude });
    }
}