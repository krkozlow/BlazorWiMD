@using Blazor.Extensions;
@using Blazor.Extensions.Storage;
@using AspNetMonsters.Blazor.Geolocation

@inject LocalStorage localStorage
@inject LocationService LocationService

@page "/location"

<div class="container">
    <input type="button" id="sendMessage" value="Send" class="btn btn-primary" onclick="@SendMessage" />
    <ul id="discussion">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
</div>

@functions {
    HubConnection connection;
    IList<string> messages = new List<string>();
    AspNetMonsters.Blazor.Geolocation.Location location;

    protected override async Task OnInitAsync()
    {
        var token = await localStorage.GetItem<string>("token");
        connection = new HubConnectionBuilder().WithUrl("http://localhost:64827/locationhub", options =>
        {
            options.AccessTokenProvider = () => Task.FromResult(token);
        })
        .Build();
        connection.On<string, string>("broadcastMessage", this.OnBroadcastMessage);
        await connection.StartAsync();
    }

    Task OnBroadcastMessage(string name, string message)
    {
        messages.Add(name + " : " + message);
        StateHasChanged();
        return Task.CompletedTask;
    }

    async Task SendMessage()
    {
        location = await LocationService.GetLocationAsync();
        await connection.InvokeAsync("Send", "Blazor Client", $"Latitude: {location.Latitude},Longitude: {location.Longitude},Accuracy: {location.Accuracy}");
    }
}