@using Blazor.Extensions;
@using Blazor.Extensions.Storage;
@using AspNetMonsters.Blazor.Geolocation;
@using Microsoft.JSInterop;
@using Microsoft.AspNetCore.Blazor.Services;

@inject LocationService LocationService
@inject SessionStorage sessionStorage
@inject IUriHelper uriHelper

@page "/location"
<div class="container">
    <div id="mapid">

    </div>
    <select class="form-control" onchange=@DoStuff>
        @foreach (var connectedUser in connectedUsers)
        {
            <option value=@connectedUser.Email>@connectedUser.Email</option>
        }
    </select>
</div>

@functions {
    IList<UserLocation> connectedUsers = new List<UserLocation>
    {
        new UserLocation{ Email = "krzys2@email.com" },
        new UserLocation{ Email = "krzys3@email.com" }
    };
    string selectedString;
    HubConnection connection;
    AspNetMonsters.Blazor.Geolocation.Location location;
    IList<UserLocation> usersLocation = new List<UserLocation>();
    IList<AspNetMonsters.Blazor.Geolocation.Location> locations = new List<AspNetMonsters.Blazor.Geolocation.Location>();

    async Task DoStuff(UIChangeEventArgs e)
    {
        selectedString = e.Value.ToString();
        var selectedConnectedUser = connectedUsers.First(x => x.Email == selectedString);
        await ListenForUser(selectedConnectedUser);
        Console.WriteLine("It is definitely: " + selectedString);
    }

    protected override async Task OnInitAsync()
    {
        Console.WriteLine("OnInitAsync");
        var token = await sessionStorage.GetItem<string>("token");
        Console.WriteLine($"Location {token}");
        if (token == null)
        {
            uriHelper.NavigateTo("/login");
        }
        connection = new HubConnectionBuilder().WithUrl("http://localhost:64827/locationhub", options =>
        {
            options.AccessTokenProvider = () => Task.FromResult(token);
        })
        .Build();

        connection.On<UserLocation>("broadcastMessage", this.OnBroadcastMessage);
        await connection.StartAsync();
        location = await LocationService.GetLocationAsync();

        await JSRuntime.Current.InvokeAsync<bool>("SetMap", location.Latitude, location.Longitude);

        await base.OnInitAsync();
    }

    protected override async Task OnAfterRenderAsync()
    {
        Console.WriteLine("OnAfterRenderAsync");
        await Task.Delay(5000);
        await SendMessage();
        await base.OnAfterRenderAsync();
    }

    Task OnBroadcastMessage(UserLocation userLocation)
    {
        Console.WriteLine($"OnBroadcastMessage user {userLocation.Email} lat {userLocation.Location.Latitude} long {userLocation.Location.Longitude}");

        if (usersLocation.Any(x => x.Email == userLocation.Email))
        {
            var locationToUpdate = usersLocation.First(x => x.Email == userLocation.Email);
            locationToUpdate.Location = userLocation.Location;
        }
        else
        {
            usersLocation.Add(userLocation);
        }

        LogAllUsersLocation();

        JSRuntime.Current.InvokeAsync<bool>("CleanMarkups");

        foreach (var l in usersLocation)
        {
            JSRuntime.Current.InvokeAsync<bool>("AddLocation", l.Location.Latitude, l.Location.Longitude, l.Email);
        }

        return Task.CompletedTask;
    }

    Task OnUserLeave(string userName)
    {
        if (usersLocation.Any(x => x.Email == userName))
        {
            var userToRemove = usersLocation.First(x => x.Email == userName);
            var indexToRemove = usersLocation.IndexOf(userToRemove);
            usersLocation.RemoveAt(indexToRemove);
        }

        LogAllUsersLocation();

        JSRuntime.Current.InvokeAsync<bool>("CleanMarkups");

        foreach (var l in usersLocation)
        {
            JSRuntime.Current.InvokeAsync<bool>("AddLocation", l.Location.Latitude, l.Location.Longitude, l.Email);
        }

        return Task.CompletedTask;
    }

    private void LogAllUsersLocation()
    {
        Console.WriteLine("LogAllUsersLocation");
        foreach (var user in usersLocation)
        {
            Console.WriteLine($"Email {user.Email}, Lat {user.Location.Latitude}, Long {user.Location.Longitude}");
        }
    }

    async Task SendMessage()
    {
        Random random = new Random();
        location = await LocationService.GetLocationAsync();
        location.Latitude +=  (decimal)random.NextDouble() * 0.01m;
        location.Longitude += (decimal)random.NextDouble() * 0.01m;

        UserLocation currentUser = new UserLocation
        {
            Location = new AspNetMonsters.Blazor.Geolocation.Location { Latitude = location.Latitude, Longitude = location.Longitude }
        };

        await connection.InvokeAsync("Send", currentUser);
        StateHasChanged();
    }

    async Task ListenForUser(UserLocation listenForUser)
    {
        await connection.InvokeAsync("ListenForUser", listenForUser);
        StateHasChanged();
    }

    public class UserLocation
    {
        public string Email { get; set; }
        public AspNetMonsters.Blazor.Geolocation.Location Location { get; set; }
    }
}